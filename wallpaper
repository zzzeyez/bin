#!/usr/bin/env bash
#
# author: daniel neemann (@zzzeyez)
#
# sets wallpaper from `wal` color number,
# image address or hex value
#
# requires `imagemagick`, `wal`

image="/tmp/wallpaper.png"
image2="/tmp/solidbg2.png"

single() {
	path="$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"
}

random() {
	dir="$1"
	n_files="$(/bin/ls -1 "$dir" | wc -l | cut -f1)"
	rand_num="$(awk "BEGIN{srand();print int($n_files * rand()) + 1;}")"
	file="$(/bin/ls -1 "$dir" | sed -ne "${rand_num}p")"
	path="$(cd $dir && echo "$PWD/$file")" # Converts to full path
}

duplicate () {
	# osascript does not allow you to repeatedly set as same image
	# so we generate an additional image
	if [ ! -f "$image2" ] ; then
		convert -size 5x5 xc:"#aaaaaa" "$image2"
	fi
	set_wallpaper "$image2" &&
	rm "$image2"
}

walcolor() {
	source "${HOME}/.cache/wal/colors.sh"
	declare -n walcolor=color$1
	color="$walcolor"
	convert -size 5x5 xc:"$color" "$image"
}

store() {
	if test -e $path -a $(file -b --mime-type $path) = "image/png"; then
		cp "$path" "$image"
	else
		convert "$path" "$image"
	fi
}

set_wallpaper() {
	if [[ "$single" ]] ; then
		osascript -e "tell application \"Finder\" to set desktop picture to POSIX file \"${1}\""
	else
		METHOD=$(sw_vers -productVersion | awk -F'.' '{ if ($1 < 10 || $2 < 9) { print "osascript" } else{ print "sqlite3"  } }')
		case $METHOD in
	        osascript)
			osascript -e "tell application \"Finder\" to set desktop picture \
				to POSIX file \"${1}\""
		;;
		sqlite3)
			current_path=$(sqlite3 -noheader -batch ${HOME}/Library/Application\ Support/Dock/desktoppicture.db 'select value from data limit 1')
			if [[ "$current_path" != "$1" ]]; then
				sqlite3 ${HOME}/Library/Application\ Support/Dock/desktoppicture.db "update data set value = '${1}'" && killall Dock
			fi
		;;
		*)
			echo "error setting wallpaper" && exit 1
		;;
	esac
	fi
}

notify() {
	if [ -x "$notify" ] ; then
		if [[ "$path" ]] ; then
			notify-send -i "$path" -m "wallpaper set as ${path##*/}"
		elif [[ "$color" ]] ; then
			notify-send -i "$image" -m "wallpaper set as $color"
		fi
	fi
}

help() {
	echo "available inputs: Wal color number, image address, directory, hex value "
	echo "so for example: "
	echo "wallpaper 8 "
	echo "wallpaper ./smiledog.jpg "
	echo "wallpaper ~/wallpapers/ "
	echo "wallpaper dddddd  "
	echo "-n to alert notify-send "
	echo "-o to apply to current workspace only "
	echo "-x to alleviate broken wallpaper "
	echo "-p to open current wallpaper in feh"
}

flags() {
	while getopts nophx opt; do
		case $opt in
			n)
			notify="$(which notify-send)"
			;;
			o)
			single="on"
			;;
			p)
			feh "$image"
			exit
			;;
			h)
			help
			exit
			;;
			x)
			rm "${HOME}/Library/Application Support/Dock/desktoppicture.db" && killall Dock && killall Finder
			exit
			;;
			*)
			help
			exit
			;;
		esac
	done
	# if no flags are provided do treat argument as file or directory
	shift "$((OPTIND-1))" 
	if [ "$1" != "-*" ] && [ "$1" ] ; then
		case "$1" in
		[0-9]) walcolor "$1" ;;
		*.*) single "$1" ;;
		*) random "$1" ;;
		esac
	fi
}

if [ "$#" -ne 0 ]; then
	flags "$@"
	if [[ -z "$path" ]] ; then
		duplicate &&
		set_wallpaper "$image" &&
		notify
	else
		set_wallpaper "$path" & store &&
		notify
	fi
else
	help && exit
fi
